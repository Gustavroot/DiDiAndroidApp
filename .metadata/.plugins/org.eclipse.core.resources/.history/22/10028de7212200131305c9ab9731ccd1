package cr.didi.didi;

import android.annotation.TargetApi;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.NavUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.LocationSource;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

public class PedirTaxiActivity extends FragmentActivity implements LocationListener, LocationSource{

	private GoogleMap mMap;
    //private LocationClient mLocationClient;
    //private Location mCurrentLocation;
    private OnLocationChangedListener mListener;
    private LocationManager locationManager;
    private CameraUpdate cu;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_pedir_taxi);
		// Show the Up button in the action bar.
		setupActionBar();
		
        //Se mantiene oculta la barra de progreso desde el inicio
        ProgressBar pb=(ProgressBar)findViewById(R.id.progressBar1);
        pb.setVisibility(View.GONE);
        
        
        
        
        
        
        
        
        
        
        
        
		//Coding for map center
    	String latActual="";
    	String lngActual="";
		locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
        if(locationManager != null)
        {
            boolean gpsIsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
            boolean networkIsEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
            if(gpsIsEnabled)
            {
                locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000L, 10F, this);
                //obtencion forzada de location
                latActual=String.valueOf(locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER).getLatitude());
                lngActual=String.valueOf(locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER).getLongitude());
            }
            else if(networkIsEnabled)
            {
                locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 5000L, 10F, this);
                //obtencion forzada de location
                latActual=String.valueOf(locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER).getLatitude());
                lngActual=String.valueOf(locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER).getLongitude());
            }
            else
            {
                //Show an error dialog that GPS is disabled...
            	Toast.makeText(this, "GPS deshabilitado.", Toast.LENGTH_SHORT).show();
            }
        }
        else
        {
            //Show some generic error dialog because something must have gone wrong with location manager.
        	mMap.setLocationSource(this);
        }
		//Toast.makeText(this, "Ajua.", Toast.LENGTH_SHORT).show();
		//Toast.makeText(this, latActual, Toast.LENGTH_SHORT).show();
		//Toast.makeText(this, lngActual, Toast.LENGTH_SHORT).show();
		Marker markerPosActual=mMap.addMarker(new MarkerOptions()
		.position(new LatLng(Double.parseDouble(latActual), Double.parseDouble(lngActual)))
		.title("Pos. actual"));
		
		//Se crea bounds y latlngbounds
		LatLngBounds.Builder builder = new LatLngBounds.Builder();
	    builder.include(markerCliente.getPosition());
	    builder.include(markerPosActual.getPosition());
		LatLngBounds bounds = builder.build();
		//Se hace un update de la camera
		int padding = 50; // offset from edges of the map in pixels
		cu = CameraUpdateFactory.newLatLngBounds(bounds, padding);
		//Y finalmente se procede a mover el mapa

		//Se debe agregar un metodo, tal que se ejecute cuando el mapa ya este
		//pasado por el layout, pues si no hay problemas
		View mapView = getSupportFragmentManager().findFragmentById(R.id.mapclient).getView();
		if (mapView.getViewTreeObserver().isAlive()) {
		    mapView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
		        @Override
		        public void onGlobalLayout() {
		    		mMap.moveCamera(cu);
		        }
		    });
		}
        
        
        
        
        
        
        
        
        
        
        
        
        
        
	}

	/**
	 * Set up the {@link android.app.ActionBar}, if the API is available.
	 */
	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	private void setupActionBar() {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			getActionBar().setDisplayHomeAsUpEnabled(true);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.pedir_taxi, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			// This ID represents the Home or Up button. In the case of this
			// activity, the Up button is shown. Use NavUtils to allow users
			// to navigate up one level in the application structure. For
			// more details, see the Navigation pattern on Android Design:
			//
			// http://developer.android.com/design/patterns/navigation.html#up-vs-back
			//
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

}
